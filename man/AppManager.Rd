% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/appManager.R
\name{AppManager}
\alias{AppManager}
\title{AppManager}
\description{
Manage shiny apps running in background tasks.
}
\examples{
\dontrun{
# Make a stub
manager <- AppManager$new()
manager

# Create background shiny apps
app <- system.file("apps/sever-info-app.R", package = "shinybg")
app1 <- runBackgroundApp(appFile = app, port = 3001)
app2 <- runBackgroundApp(appFile = app, port = 3002)

# Register the apps
manager$register_app(port = 3001, app = app1)
manager$register_app(port = 3002, app = app2)

# List all managed apps
manager
manager$list_ports()

# Retrieve app by port
manager$retrieve_app(port = "3001")

# Kill all apps
manager$kill_all_apps()
}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{apps}}{(list) list of running shiny apps named for their}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-AppManager-print}{\code{AppManager$print()}}
\item \href{#method-AppManager-register_app}{\code{AppManager$register_app()}}
\item \href{#method-AppManager-retrieve_app}{\code{AppManager$retrieve_app()}}
\item \href{#method-AppManager-view_app}{\code{AppManager$view_app()}}
\item \href{#method-AppManager-kill_app}{\code{AppManager$kill_app()}}
\item \href{#method-AppManager-kill_all_apps}{\code{AppManager$kill_all_apps()}}
\item \href{#method-AppManager-list_ports}{\code{AppManager$list_ports()}}
\item \href{#method-AppManager-clone}{\code{AppManager$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-print"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-print}{}}}
\subsection{Method \code{print()}}{
print method for the \code{AppManager} class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$print(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{self}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-register_app"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-register_app}{}}}
\subsection{Method \code{register_app()}}{
Register an app
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$register_app(port, app)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{port}}{TCP port the app is listening on (e.g., 3000)}

\item{\code{app}}{\link[callr:r_process]{callr::r_process} for a Shiny app}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing returned
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-retrieve_app"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-retrieve_app}{}}}
\subsection{Method \code{retrieve_app()}}{
Retrieve a registered app
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$retrieve_app(port)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{port}}{TCP port the app is listening on (e.g., 3000)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\link[callr:r_process]{callr::r_process} for a Shiny app
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-view_app"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-view_app}{}}}
\subsection{Method \code{view_app()}}{
View background Shiny application
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$view_app(port)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{port}}{TCP port the app is listening on (e.g., 3000)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(Invisibly) The application's URL.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-kill_app"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-kill_app}{}}}
\subsection{Method \code{kill_app()}}{
Kill an app's process and deregister it
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$kill_app(port, verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{port}}{TCP port the app is listening on (e.g., 3000)}

\item{\code{verbose}}{(logical) Should messages be printed to the console?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{TRUE} if the process was terminated, and \code{FALSE} if it was not
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-kill_all_apps"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-kill_all_apps}{}}}
\subsection{Method \code{kill_all_apps()}}{
Kill all registered apps
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$kill_all_apps(verbose = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{verbose}}{(logical) Should messages be printed to the console?}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing returned
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-list_ports"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-list_ports}{}}}
\subsection{Method \code{list_ports()}}{
List ports used by registered apps
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$list_ports()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Character vector with 0 or more elements
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-AppManager-clone"></a>}}
\if{latex}{\out{\hypertarget{method-AppManager-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{AppManager$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
